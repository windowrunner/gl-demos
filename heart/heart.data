precision mediump float;

// 2D Heart based off of Inigo Quilez's Heart Tutorial https://www.youtube.com/watch?v=aNR4n0i2ZlM

uniform float iTime;
uniform vec2 iResolution;

#define PI 3.1415926535897932384626433832795

float shape_contains_point(vec2 point)
{
	// circle with radius ~15
    float radius = 15.0 + 3.0*pow(0.5+0.5*sin(2.0*PI*iTime+point.y/25.0), 6.0);
    float x = abs(point.x);
    float y = 5.0+1.3*point.y-x*sqrt(abs(20.0-x)/15.0);
    float r2 = radius*radius;
    float smoothRadius = radius + 0.5;
    float r2Smooth = smoothRadius*smoothRadius;
    return 1.0-smoothstep(r2, r2Smooth, x*x+y*y);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
	vec4 background_color = vec4(1.0,0.82,0.9, 1.0);
	vec4 heart_color = vec4(0.9,0.02,0.01, 1.0);

    float min_resolution = min(iResolution.x, iResolution.y);
	// map 0-Width to -30-30
	mat3 to_local = mat3(
		// column 1
		60.0/min_resolution, 0.0, 0.0,
		// column 2
		0.0, 60.0/min_resolution, 0.0,
		// column 3
		-30.0 * iResolution.x / min_resolution, -30.0 * iResolution.y / min_resolution, 1.0
		);
	vec3 local_position = to_local * vec3(fragCoord.xy, 1.0);
    fragColor = mix(background_color, heart_color, shape_contains_point(local_position.xy));
}

out vec4 FragColor;
void main()
{
    vec2 frag_coord = gl_FragCoord.xy;
    mainImage(FragColor, frag_coord);
}precision mediump float;
out vec4 FragColor;
void main()
{
    FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f);
}layout (location = 0) in vec3 aPos;
void main()
{
    gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);
}precision mediump float;

const vec4 begin = vec4(0.1, 0.75, 1.0, 1.0);
const vec4 end = vec4(1.0, 1.0, 1.0, 1.0);

out vec4 FragColor;

void main(void) {
  vec2 pc = (gl_PointCoord - 0.5) * 2.0;
  float dist = (1.0 - length(pc));
  vec4 color = mix(begin, end, dist);
  FragColor = vec4(dist, dist, dist, dist) * color;
}precision mediump float;

uniform mat4 model2View;
uniform mat4 view2clip;

layout (location = 0) in vec3 position;

void main(void) {

  vec4 camPosition = model2View * vec4(position, 1.0);
  gl_Position = view2clip * camPosition;
  float cameraDist = abs(camPosition.z);//length(camPosition.xyz);
  cameraDist = clamp(cameraDist/2.0,0.0,1.0);
  gl_PointSize = 12.0*(1.0 - pow(cameraDist,4.0))+3.0;
}